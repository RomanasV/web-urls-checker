{"version":3,"sources":["../../../full-version/frontend/src/components/LinksList/LinksList.js","../../../full-version/frontend/src/containers/LinksChecker.js","../../../full-version/frontend/src/App.js","../../../full-version/frontend/src/serviceWorker.js","../../../full-version/frontend/src/index.js"],"names":["LinksList","props","link","index","checkUrl","react_default","a","createElement","Grid","container","item","xs","Button","href","target","size","color","onClick","ListItem","button","divider","key","dense","ListItemText","primary","status","Link","underline","LinksChecker","state","pageUrl","links","loading","stats","pageUrlHandler","event","_this","setState","value","submitHandler","preventDefault","axios","post","then","res","console","log","data","handleStats","catch","err","handlePageCheck","checked","length","pass","filter","failed","_this2","this","map","components_LinksList_LinksList","Typography","Fragment","Container","maxWidth","direction","justify","alignItems","md","lg","onSubmit","TextField","id","label","margin","variant","fullWidth","disabled","onChange","required","type","List","CircularProgress","PureComponent","App","LinksChecker_LinksChecker","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b162ced6.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { Grid, Link, Typography, Divider, Button } from \"@material-ui/core/\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\n// import ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\n// import InboxIcon from \"@material-ui/icons/Inbox\";\r\n// import DraftsIcon from \"@material-ui/icons/Drafts\";\r\n\r\nconst LinksList = props => {\r\n  const { link, index, checkUrl } = props;\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={1}>\r\n        <Button href={link.link} target=\"_blank\" size=\"small\" color=\"primary\">\r\n          Visit\r\n        </Button>\r\n        <Button\r\n          size=\"small\"\r\n          color=\"secondary\"\r\n          onClick={() => checkUrl(link.link)}\r\n        >\r\n          Check\r\n        </Button>\r\n        {/* <ListItemText primary={link.status} /> */}\r\n      </Grid>\r\n      <Grid item container xs={11}>\r\n        <ListItem button divider key={index} dense>\r\n          <Grid item xs={2}>\r\n            <ListItemText primary={link.status} />\r\n          </Grid>\r\n          <Grid item xs={10}>\r\n            <Link\r\n              //   href={link.link}\r\n              //   component=\"button\"\r\n              underline=\"none\"\r\n              color=\"inherit\"\r\n            >\r\n              {link.link}\r\n            </Link>\r\n          </Grid>\r\n        </ListItem>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default LinksList;\r\n","import React, { PureComponent } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Container,\r\n  Grid,\r\n  Typography,\r\n  CircularProgress,\r\n  FormControl,\r\n  InputLabel,\r\n  Input,\r\n  FormHelperText,\r\n  Divider\r\n} from \"@material-ui/core/\";\r\nimport LinksList from \"../components/LinksList/LinksList\";\r\nimport List from \"@material-ui/core/List\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nexport default class LinksChecker extends PureComponent {\r\n  state = {\r\n    pageUrl: \"\",\r\n    links: [],\r\n    loading: false,\r\n    stats: null\r\n  };\r\n\r\n  pageUrlHandler = event => {\r\n    this.setState({\r\n      pageUrl: event.target.value\r\n    });\r\n  };\r\n\r\n  submitHandler = event => {\r\n    this.setState({ links: [], loading: true, stats: null });\r\n    event.preventDefault();\r\n\r\n    const link = {\r\n      link: this.state.pageUrl\r\n    };\r\n\r\n    axios\r\n      .post(\"http://localhost:5000\", link)\r\n      .then(res => {\r\n        console.log(res.data);\r\n        const stats = this.handleStats(res.data);\r\n        this.setState({ links: res.data, loading: false, pageUrl: \"\", stats });\r\n      })\r\n      .catch(err => console.log(err));\r\n\r\n    // this.setState({\r\n    //   pageUrl: \"\"\r\n    // });\r\n  };\r\n\r\n  handlePageCheck = link => {\r\n    this.setState({ pageUrl: link });\r\n  };\r\n\r\n  handleStats = data => {\r\n    const checked = data.length;\r\n    const pass = data.filter(link => link.status === 200).length;\r\n    const failed = data.filter(link => link.status !== 200).length;\r\n\r\n    const stats = {\r\n      checked,\r\n      pass,\r\n      failed\r\n    };\r\n\r\n    return stats;\r\n  };\r\n\r\n  render() {\r\n    let links = null;\r\n    if (this.state.links) {\r\n      links = this.state.links.map((link, index) => (\r\n        <LinksList link={link} index={index} checkUrl={this.handlePageCheck} />\r\n      ));\r\n    }\r\n\r\n    let stats = null;\r\n    if (this.state.stats) {\r\n      stats = (\r\n        <Typography>\r\n          {this.state.stats.checked} links checked: {this.state.stats.pass}{\" \"}\r\n          passed, {this.state.stats.failed} failed.\r\n        </Typography>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Container maxWidth=\"md\">\r\n          <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n            <Grid item xs={12} md={8} lg={6}>\r\n              <form onSubmit={this.submitHandler}>\r\n                <TextField\r\n                  id=\"standard-dense\"\r\n                  label=\"Page URL\"\r\n                  margin=\"dense\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  // type=\"url\"\r\n                  disabled={this.state.loading}\r\n                  value={this.state.pageUrl}\r\n                  onChange={this.pageUrlHandler}\r\n                  required\r\n                />\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  disabled={this.state.loading || !this.state.pageUrl}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </form>\r\n            </Grid>\r\n\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              container\r\n              direction=\"row\"\r\n              justify=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <List>\r\n                {this.state.stats && stats}\r\n                {this.state.loading ? (\r\n                  <CircularProgress color=\"primary\" />\r\n                ) : (\r\n                  links\r\n                )}\r\n              </List>\r\n            </Grid>\r\n          </Grid>\r\n          {/* <LinksTable links={this.state.links} /> */}\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport LinksChecker from \"./containers/LinksChecker\";\n\nfunction App() {\n  return <LinksChecker />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}